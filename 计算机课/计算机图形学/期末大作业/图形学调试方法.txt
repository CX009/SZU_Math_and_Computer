图形学调试方法: 
1. 为 shader 的读取、编译、链接设置异常处理, 输出对应的日志信息. 若程序能运行, 但有物体未显示出来, 可能是其对应的 shader 读取或编译失败. 
2. 若物体不能正常显示, 一般是 vshader 的问题, 可检查设置的 uniform 变量的名称是否对应. 
3. 若物体位置能正确显示, 但纹理或光照等不正确, 一般是 fshader 的问题, 可检查变量名是否写错. 
4. 反射光只能在一定范围内看见, 若光源和材质的参数设置正确但未见物体的反射, 可能是摄像机太高了(高于光源). 
5. 注意函数的参数向量的方向, 如光源指向片段还是片段指向光源. 
6. 将物体加入场景中、对物体做变换时, 要考虑是在何坐标系下进行. 
7. 若将顶点坐标、法向量、颜色、纹理坐标等集合在一个 float[] 中, 则修改后要更新 glVertexAttribPointer() 中的步长、偏移量等. 若程序能过编译但运行崩溃, 考虑为此原因. 
8. 若一个物体涉及到多个顶点, 如一个弹簧有两个质点, 计算空间时要乘上顶点个数. 
9. 若有多个 shader , 则设置每个 shader 的 uniform 变量时要注意使用该 shader 的着色器程序对象. 
10. 注意 model 矩阵中平移、旋转、缩放顺序. 

图形学心得: 
1. 学图形学就像学 ACM , 理论简单实现难, 轻理论重实践. 
2. 从学习图形学的角度, 最好能看懂所有理论和实现, 如深度缓冲等的计算.从编程的角度, 无需看懂所有理论和实现, 只需将代码贴到正确的位置和修改参数.
3. GAMES 101 讲得很好, 但是课堂上纯理论, 几乎不讲实现, 不适合新手. LearnOpenGL 理论和实现结合, 顺序合理, 适合新手入门图形学. SZU 的图形学理论课顺序安排合理, 实验课注重实现, 更重要地, 周老师讲得好. 
4. 多文件, OOP , 多封装繁琐的操作, 如 shader 类、camera 类、绘制正方体、绘制球等. 
5. 手推几何关系时不能将图画得太特殊. 
6. 要画出好看的场景, 除了需要过硬的理论和实现, 还需要良好的审美. 认知决定上限. 
7. 仿真写起来太恶心了. 
8. LearnOpenGL 的中文翻译有挺多错的, 如果发现自己有地方读不懂, 可以怀疑是翻译错了. 建议对照英文版阅读. 
9. 不迷信权威, 如 LearnOpenGL 中关于有透明物体的场景的渲染顺序的介绍有点问题. 我认为的顺序: ① 不透明物体、全透明物体; ② 天空盒; ③ 按顺序的半透明物体.
10. 有人说 OpenGL 很难用, 哪里难了, 这么多年一直是这个难度. 